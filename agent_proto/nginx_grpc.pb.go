// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: nginx.proto

package agent_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NginxService_GetNginxInfo_FullMethodName = "/agent_proto.NginxService/GetNginxInfo"
)

// NginxServiceClient is the client API for NginxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NginxServiceClient interface {
	GetNginxInfo(ctx context.Context, in *GetNginxInfoRequest, opts ...grpc.CallOption) (*GetNginxInfoResponse, error)
}

type nginxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNginxServiceClient(cc grpc.ClientConnInterface) NginxServiceClient {
	return &nginxServiceClient{cc}
}

func (c *nginxServiceClient) GetNginxInfo(ctx context.Context, in *GetNginxInfoRequest, opts ...grpc.CallOption) (*GetNginxInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNginxInfoResponse)
	err := c.cc.Invoke(ctx, NginxService_GetNginxInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NginxServiceServer is the server API for NginxService service.
// All implementations must embed UnimplementedNginxServiceServer
// for forward compatibility
type NginxServiceServer interface {
	GetNginxInfo(context.Context, *GetNginxInfoRequest) (*GetNginxInfoResponse, error)
	mustEmbedUnimplementedNginxServiceServer()
}

// UnimplementedNginxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNginxServiceServer struct {
}

func (UnimplementedNginxServiceServer) GetNginxInfo(context.Context, *GetNginxInfoRequest) (*GetNginxInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNginxInfo not implemented")
}
func (UnimplementedNginxServiceServer) mustEmbedUnimplementedNginxServiceServer() {}

// UnsafeNginxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NginxServiceServer will
// result in compilation errors.
type UnsafeNginxServiceServer interface {
	mustEmbedUnimplementedNginxServiceServer()
}

func RegisterNginxServiceServer(s grpc.ServiceRegistrar, srv NginxServiceServer) {
	s.RegisterService(&NginxService_ServiceDesc, srv)
}

func _NginxService_GetNginxInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNginxInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxServiceServer).GetNginxInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NginxService_GetNginxInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxServiceServer).GetNginxInfo(ctx, req.(*GetNginxInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NginxService_ServiceDesc is the grpc.ServiceDesc for NginxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NginxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_proto.NginxService",
	HandlerType: (*NginxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNginxInfo",
			Handler:    _NginxService_GetNginxInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nginx.proto",
}
