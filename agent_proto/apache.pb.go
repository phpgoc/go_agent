// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: apache.proto

package agent_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetApacheInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetApacheInfoRequest) Reset() {
	*x = GetApacheInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApacheInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApacheInfoRequest) ProtoMessage() {}

func (x *GetApacheInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApacheInfoRequest.ProtoReflect.Descriptor instead.
func (*GetApacheInfoRequest) Descriptor() ([]byte, []int) {
	return file_apache_proto_rawDescGZIP(), []int{0}
}

type GetApacheInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ConfigFiles  []string             `protobuf:"bytes,2,rep,name=configFiles,proto3" json:"configFiles,omitempty"`
	Root         string               `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	ServerNames  []string             `protobuf:"bytes,4,rep,name=serverNames,proto3" json:"serverNames,omitempty"`
	Listens      []string             `protobuf:"bytes,5,rep,name=listens,proto3" json:"listens,omitempty"`
	VirtualHosts []*ApacheVirtualHost `protobuf:"bytes,6,rep,name=virtualHosts,proto3" json:"virtualHosts,omitempty"`
	ErrorLogs    []*ApacheLog         `protobuf:"bytes,7,rep,name=errorLogs,proto3" json:"errorLogs,omitempty"`
	CustomLogs   []*ApacheLog         `protobuf:"bytes,8,rep,name=customLogs,proto3" json:"customLogs,omitempty"`
}

func (x *GetApacheInfoResponse) Reset() {
	*x = GetApacheInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApacheInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApacheInfoResponse) ProtoMessage() {}

func (x *GetApacheInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApacheInfoResponse.ProtoReflect.Descriptor instead.
func (*GetApacheInfoResponse) Descriptor() ([]byte, []int) {
	return file_apache_proto_rawDescGZIP(), []int{1}
}

func (x *GetApacheInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetApacheInfoResponse) GetConfigFiles() []string {
	if x != nil {
		return x.ConfigFiles
	}
	return nil
}

func (x *GetApacheInfoResponse) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *GetApacheInfoResponse) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *GetApacheInfoResponse) GetListens() []string {
	if x != nil {
		return x.Listens
	}
	return nil
}

func (x *GetApacheInfoResponse) GetVirtualHosts() []*ApacheVirtualHost {
	if x != nil {
		return x.VirtualHosts
	}
	return nil
}

func (x *GetApacheInfoResponse) GetErrorLogs() []*ApacheLog {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

func (x *GetApacheInfoResponse) GetCustomLogs() []*ApacheLog {
	if x != nil {
		return x.CustomLogs
	}
	return nil
}

type ApacheVirtualHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNames []string   `protobuf:"bytes,1,rep,name=serverNames,proto3" json:"serverNames,omitempty"`
	Listens     []string   `protobuf:"bytes,2,rep,name=listens,proto3" json:"listens,omitempty"`
	Root        string     `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	ErrorLog    *ApacheLog `protobuf:"bytes,4,opt,name=errorLog,proto3" json:"errorLog,omitempty"`
	CustomLog   *ApacheLog `protobuf:"bytes,5,opt,name=customLog,proto3" json:"customLog,omitempty"`
}

func (x *ApacheVirtualHost) Reset() {
	*x = ApacheVirtualHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApacheVirtualHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApacheVirtualHost) ProtoMessage() {}

func (x *ApacheVirtualHost) ProtoReflect() protoreflect.Message {
	mi := &file_apache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApacheVirtualHost.ProtoReflect.Descriptor instead.
func (*ApacheVirtualHost) Descriptor() ([]byte, []int) {
	return file_apache_proto_rawDescGZIP(), []int{2}
}

func (x *ApacheVirtualHost) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *ApacheVirtualHost) GetListens() []string {
	if x != nil {
		return x.Listens
	}
	return nil
}

func (x *ApacheVirtualHost) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *ApacheVirtualHost) GetErrorLog() *ApacheLog {
	if x != nil {
		return x.ErrorLog
	}
	return nil
}

func (x *ApacheVirtualHost) GetCustomLog() *ApacheLog {
	if x != nil {
		return x.CustomLog
	}
	return nil
}

type ApacheLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath   string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size       string `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	ModifyTime string `protobuf:"bytes,3,opt,name=modifyTime,proto3" json:"modifyTime,omitempty"`
}

func (x *ApacheLog) Reset() {
	*x = ApacheLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApacheLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApacheLog) ProtoMessage() {}

func (x *ApacheLog) ProtoReflect() protoreflect.Message {
	mi := &file_apache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApacheLog.ProtoReflect.Descriptor instead.
func (*ApacheLog) Descriptor() ([]byte, []int) {
	return file_apache_proto_rawDescGZIP(), []int{3}
}

func (x *ApacheLog) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ApacheLog) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ApacheLog) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

var File_apache_proto protoreflect.FileDescriptor

var file_apache_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd5, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x67, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x11,
	0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x22, 0x5b, 0x0a, 0x09, 0x41,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x69, 0x0a, 0x0d, 0x41, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apache_proto_rawDescOnce sync.Once
	file_apache_proto_rawDescData = file_apache_proto_rawDesc
)

func file_apache_proto_rawDescGZIP() []byte {
	file_apache_proto_rawDescOnce.Do(func() {
		file_apache_proto_rawDescData = protoimpl.X.CompressGZIP(file_apache_proto_rawDescData)
	})
	return file_apache_proto_rawDescData
}

var file_apache_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_apache_proto_goTypes = []any{
	(*GetApacheInfoRequest)(nil),  // 0: agent_proto.GetApacheInfoRequest
	(*GetApacheInfoResponse)(nil), // 1: agent_proto.GetApacheInfoResponse
	(*ApacheVirtualHost)(nil),     // 2: agent_proto.ApacheVirtualHost
	(*ApacheLog)(nil),             // 3: agent_proto.ApacheLog
}
var file_apache_proto_depIdxs = []int32{
	2, // 0: agent_proto.GetApacheInfoResponse.virtualHosts:type_name -> agent_proto.ApacheVirtualHost
	3, // 1: agent_proto.GetApacheInfoResponse.errorLogs:type_name -> agent_proto.ApacheLog
	3, // 2: agent_proto.GetApacheInfoResponse.customLogs:type_name -> agent_proto.ApacheLog
	3, // 3: agent_proto.ApacheVirtualHost.errorLog:type_name -> agent_proto.ApacheLog
	3, // 4: agent_proto.ApacheVirtualHost.customLog:type_name -> agent_proto.ApacheLog
	0, // 5: agent_proto.ApacheService.GetApacheInfo:input_type -> agent_proto.GetApacheInfoRequest
	1, // 6: agent_proto.ApacheService.GetApacheInfo:output_type -> agent_proto.GetApacheInfoResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_apache_proto_init() }
func file_apache_proto_init() {
	if File_apache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apache_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetApacheInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apache_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetApacheInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apache_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ApacheVirtualHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apache_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ApacheLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apache_proto_goTypes,
		DependencyIndexes: file_apache_proto_depIdxs,
		MessageInfos:      file_apache_proto_msgTypes,
	}.Build()
	File_apache_proto = out.File
	file_apache_proto_rawDesc = nil
	file_apache_proto_goTypes = nil
	file_apache_proto_depIdxs = nil
}
