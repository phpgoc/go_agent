// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: get_sys_info.proto

package agent_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetSysInfoClient is the client API for GetSysInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSysInfoClient interface {
	GetSysInfo(ctx context.Context, in *GetSysInfoRequest, opts ...grpc.CallOption) (*GetSysInfoResponse, error)
}

type getSysInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSysInfoClient(cc grpc.ClientConnInterface) GetSysInfoClient {
	return &getSysInfoClient{cc}
}

func (c *getSysInfoClient) GetSysInfo(ctx context.Context, in *GetSysInfoRequest, opts ...grpc.CallOption) (*GetSysInfoResponse, error) {
	out := new(GetSysInfoResponse)
	err := c.cc.Invoke(ctx, "/agent_proto.GetSysInfo/GetSysInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetSysInfoServer is the server API for GetSysInfo service.
// All implementations must embed UnimplementedGetSysInfoServer
// for forward compatibility
type GetSysInfoServer interface {
	GetSysInfo(context.Context, *GetSysInfoRequest) (*GetSysInfoResponse, error)
	mustEmbedUnimplementedGetSysInfoServer()
}

// UnimplementedGetSysInfoServer must be embedded to have forward compatible implementations.
type UnimplementedGetSysInfoServer struct {
}

func (UnimplementedGetSysInfoServer) GetSysInfo(context.Context, *GetSysInfoRequest) (*GetSysInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysInfo not implemented")
}
func (UnimplementedGetSysInfoServer) mustEmbedUnimplementedGetSysInfoServer() {}

// UnsafeGetSysInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSysInfoServer will
// result in compilation errors.
type UnsafeGetSysInfoServer interface {
	mustEmbedUnimplementedGetSysInfoServer()
}

func RegisterGetSysInfoServer(s grpc.ServiceRegistrar, srv GetSysInfoServer) {
	s.RegisterService(&GetSysInfo_ServiceDesc, srv)
}

func _GetSysInfo_GetSysInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSysInfoServer).GetSysInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_proto.GetSysInfo/GetSysInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSysInfoServer).GetSysInfo(ctx, req.(*GetSysInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetSysInfo_ServiceDesc is the grpc.ServiceDesc for GetSysInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSysInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_proto.GetSysInfo",
	HandlerType: (*GetSysInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysInfo",
			Handler:    _GetSysInfo_GetSysInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "get_sys_info.proto",
}
