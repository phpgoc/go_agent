// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: apache.proto

package agent_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ApacheService_GetApacheInfo_FullMethodName = "/agent_proto.ApacheService/GetApacheInfo"
)

// ApacheServiceClient is the client API for ApacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApacheServiceClient interface {
	GetApacheInfo(ctx context.Context, in *GetApacheInfoRequest, opts ...grpc.CallOption) (*GetApacheInfoResponse, error)
}

type apacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApacheServiceClient(cc grpc.ClientConnInterface) ApacheServiceClient {
	return &apacheServiceClient{cc}
}

func (c *apacheServiceClient) GetApacheInfo(ctx context.Context, in *GetApacheInfoRequest, opts ...grpc.CallOption) (*GetApacheInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApacheInfoResponse)
	err := c.cc.Invoke(ctx, ApacheService_GetApacheInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApacheServiceServer is the server API for ApacheService service.
// All implementations must embed UnimplementedApacheServiceServer
// for forward compatibility
type ApacheServiceServer interface {
	GetApacheInfo(context.Context, *GetApacheInfoRequest) (*GetApacheInfoResponse, error)
	mustEmbedUnimplementedApacheServiceServer()
}

// UnimplementedApacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApacheServiceServer struct {
}

func (UnimplementedApacheServiceServer) GetApacheInfo(context.Context, *GetApacheInfoRequest) (*GetApacheInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApacheInfo not implemented")
}
func (UnimplementedApacheServiceServer) mustEmbedUnimplementedApacheServiceServer() {}

// UnsafeApacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApacheServiceServer will
// result in compilation errors.
type UnsafeApacheServiceServer interface {
	mustEmbedUnimplementedApacheServiceServer()
}

func RegisterApacheServiceServer(s grpc.ServiceRegistrar, srv ApacheServiceServer) {
	s.RegisterService(&ApacheService_ServiceDesc, srv)
}

func _ApacheService_GetApacheInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApacheInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApacheServiceServer).GetApacheInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApacheService_GetApacheInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApacheServiceServer).GetApacheInfo(ctx, req.(*GetApacheInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApacheService_ServiceDesc is the grpc.ServiceDesc for ApacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_proto.ApacheService",
	HandlerType: (*ApacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApacheInfo",
			Handler:    _ApacheService_GetApacheInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apache.proto",
}
