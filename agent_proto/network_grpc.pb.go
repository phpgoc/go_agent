// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: network.proto

package agent_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NetworkService_GetNetworkInterface_FullMethodName  = "/agent_proto.NetworkService/GetNetworkInterface"
	NetworkService_GetAllNetworkConnect_FullMethodName = "/agent_proto.NetworkService/GetAllNetworkConnect"
	NetworkService_GetNetworkBindList_FullMethodName   = "/agent_proto.NetworkService/GetNetworkBindList"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	GetNetworkInterface(ctx context.Context, in *GetNetworkInterfaceRequest, opts ...grpc.CallOption) (*GetNetworkInterfaceResponse, error)
	GetAllNetworkConnect(ctx context.Context, in *GetAllNetworkConnectRequest, opts ...grpc.CallOption) (*GetAllNetworkConnectResponse, error)
	GetNetworkBindList(ctx context.Context, in *GetNetworkBindListRequest, opts ...grpc.CallOption) (*GetNetworkBindListResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetNetworkInterface(ctx context.Context, in *GetNetworkInterfaceRequest, opts ...grpc.CallOption) (*GetNetworkInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetNetworkInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetAllNetworkConnect(ctx context.Context, in *GetAllNetworkConnectRequest, opts ...grpc.CallOption) (*GetAllNetworkConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNetworkConnectResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetAllNetworkConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetNetworkBindList(ctx context.Context, in *GetNetworkBindListRequest, opts ...grpc.CallOption) (*GetNetworkBindListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkBindListResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetNetworkBindList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	GetNetworkInterface(context.Context, *GetNetworkInterfaceRequest) (*GetNetworkInterfaceResponse, error)
	GetAllNetworkConnect(context.Context, *GetAllNetworkConnectRequest) (*GetAllNetworkConnectResponse, error)
	GetNetworkBindList(context.Context, *GetNetworkBindListRequest) (*GetNetworkBindListResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) GetNetworkInterface(context.Context, *GetNetworkInterfaceRequest) (*GetNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInterface not implemented")
}
func (UnimplementedNetworkServiceServer) GetAllNetworkConnect(context.Context, *GetAllNetworkConnectRequest) (*GetAllNetworkConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNetworkConnect not implemented")
}
func (UnimplementedNetworkServiceServer) GetNetworkBindList(context.Context, *GetNetworkBindListRequest) (*GetNetworkBindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkBindList not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_GetNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetNetworkInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetworkInterface(ctx, req.(*GetNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetAllNetworkConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNetworkConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetAllNetworkConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetAllNetworkConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetAllNetworkConnect(ctx, req.(*GetAllNetworkConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetNetworkBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkBindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetworkBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetNetworkBindList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetworkBindList(ctx, req.(*GetNetworkBindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_proto.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkInterface",
			Handler:    _NetworkService_GetNetworkInterface_Handler,
		},
		{
			MethodName: "GetAllNetworkConnect",
			Handler:    _NetworkService_GetAllNetworkConnect_Handler,
		},
		{
			MethodName: "GetNetworkBindList",
			Handler:    _NetworkService_GetNetworkBindList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
