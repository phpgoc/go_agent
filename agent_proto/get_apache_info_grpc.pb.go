// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: get_apache_info.proto

package agent_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetApacheInfoClient is the client API for GetApacheInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetApacheInfoClient interface {
	GetApacheInfo(ctx context.Context, in *GetApacheInfoRequest, opts ...grpc.CallOption) (*GetApacheInfoResponse, error)
}

type getApacheInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGetApacheInfoClient(cc grpc.ClientConnInterface) GetApacheInfoClient {
	return &getApacheInfoClient{cc}
}

func (c *getApacheInfoClient) GetApacheInfo(ctx context.Context, in *GetApacheInfoRequest, opts ...grpc.CallOption) (*GetApacheInfoResponse, error) {
	out := new(GetApacheInfoResponse)
	err := c.cc.Invoke(ctx, "/agent_proto.GetApacheInfo/GetApacheInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetApacheInfoServer is the server API for GetApacheInfo service.
// All implementations must embed UnimplementedGetApacheInfoServer
// for forward compatibility
type GetApacheInfoServer interface {
	GetApacheInfo(context.Context, *GetApacheInfoRequest) (*GetApacheInfoResponse, error)
	mustEmbedUnimplementedGetApacheInfoServer()
}

// UnimplementedGetApacheInfoServer must be embedded to have forward compatible implementations.
type UnimplementedGetApacheInfoServer struct {
}

func (UnimplementedGetApacheInfoServer) GetApacheInfo(context.Context, *GetApacheInfoRequest) (*GetApacheInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApacheInfo not implemented")
}
func (UnimplementedGetApacheInfoServer) mustEmbedUnimplementedGetApacheInfoServer() {}

// UnsafeGetApacheInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetApacheInfoServer will
// result in compilation errors.
type UnsafeGetApacheInfoServer interface {
	mustEmbedUnimplementedGetApacheInfoServer()
}

func RegisterGetApacheInfoServer(s grpc.ServiceRegistrar, srv GetApacheInfoServer) {
	s.RegisterService(&GetApacheInfo_ServiceDesc, srv)
}

func _GetApacheInfo_GetApacheInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApacheInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetApacheInfoServer).GetApacheInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_proto.GetApacheInfo/GetApacheInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetApacheInfoServer).GetApacheInfo(ctx, req.(*GetApacheInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetApacheInfo_ServiceDesc is the grpc.ServiceDesc for GetApacheInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetApacheInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_proto.GetApacheInfo",
	HandlerType: (*GetApacheInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApacheInfo",
			Handler:    _GetApacheInfo_GetApacheInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "get_apache_info.proto",
}
